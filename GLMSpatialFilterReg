#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
import numpy as np
from scipy import signal, ndimage
import GLMFunctions
"""
Created on Mon May 29 14:14:51 2017

@author: Alex
"""
# 1. Set the parameters and display for GLM
dtStim = .01 # Bin size for stimulus in seconds
dtSp = .001 # Bin size for stimulating model & computing likelihood

# Make a temporal filter
nkt = 20; # number of time bins in stimulus filter k
kt = (GLMFunctions.normpdf(np.array([np.arange(1,nkt+1)]),3.0*nkt/4.0,1.5)-.5*GLMFunctions.normpdf(np.array([np.arange(1,nkt+1)]),nkt/2.0,3.0))[:,None]

# Make a spatical filter
nkx = 10
xxk = np.arange(1,nkx+1)[:,None] # pixel locations
ttk = dtStim*(np.arange(-nkt+1,1)[:,None]) # time bins for filter
kx = 1.0/np.sqrt(2.0*np.pi*4.0)*np.exp(-(xxk-nkx/2.0)**2.0/5.0)
ktrue = np.dot(kt,kx.transpose()) # Make space-time separable filter
ktrue = np.squeeze(ktrue/np.linalg.norm(ktrue.flatten()))

# Insert into glm structure (created with default history filter)
ggsim = GLMFunctions.makeSimStruct_GLM(nkt,dtStim,dtSp) # Create GLM structure with default params
ggsim['k'] = ktrue # Insert into simulation dictionary
ggsim['dc'] = 3

# 2. Generate some training data

# generate stimulus
slen = 10000 # stimulus length (frames)
gfilt = GLMFunctions.normpdf(np.array([np.arange(-3,4)]),0.0,.8)[None,:]
Stim = signal.convolve2d(np.random.randn(slen,nkx),gfilt,mode='same')
Stim = signal.convolve2d(Stim,gfilt.transpose(),mode='same')

tsp,sps,Itot,Istm = GLMFunctions.simGLM(ggsim,Stim) # run model
#plt.imshow(ktrue)
#plt.show()